import io
import logging
import os
import platform
import struct
import subprocess
import random

from Hints import buildHints
from Utils import local_path
from Items import ItemFactory, item_data
from TextArray import text_array

class LocalRom(object):

    def __init__(self, file, patch=True):
        with open(file, 'rb') as stream:
            self.buffer = read_rom(stream)
        file_name = os.path.splitext(file)
        if len(self.buffer) < 33554432 or len(self.buffer) > 67108864 or file_name[1] not in ['.z64', '.n64']:
            raise RuntimeError('ROM is not a valid OoT 1.0 ROM.')
        if len(self.buffer) == 33554432:
            if platform.system() == 'Windows':
                subprocess.call(["Decompress\Decompress.exe", file])
            elif platform.system() == 'Linux':
                subprocess.call(["Decompress/Decompress", file])
            elif platform.system() == 'Darwin':
                subprocess.call(["Decompress/Decompress.out", file])
            else:
                raise RuntimeError('Unsupported operating system for decompression. Please supply an already decompressed ROM.')
            with open((file_name[0] + "-decomp.z64"), 'rb') as stream:
                self.buffer = read_rom(stream)
        # extend to 64MB
        self.buffer.extend(bytearray([0x00] * (67108864 - len(self.buffer))))
            

    def write_byte(self, address, value):
        self.buffer[address] = value

    def write_bytes(self, startaddress, values):
        for i, value in enumerate(values):
            self.write_byte(startaddress + i, value)

    def write_int16_to_rom(self, address, value):
        self.write_bytes(address, int16_as_bytes(value))

    def write_int32_to_rom(self, address, value):
        self.write_bytes(address, int32_as_bytes(value))

    def write_to_file(self, file):
        with open(file, 'wb') as outfile:
            outfile.write(self.buffer)

def read_rom(stream):
    "Reads rom into bytearray"
    buffer = bytearray(stream.read())
    return buffer


def int16_as_bytes(value):
    value = value & 0xFFFF
    return [value & 0xFF, (value >> 8) & 0xFF]

def int32_as_bytes(value):
    value = value & 0xFFFFFFFF
    return [value & 0xFF, (value >> 8) & 0xFF, (value >> 16) & 0xFF, (value >> 24) & 0xFF]

def patch_rom(world, rom):

    # Can always return to youth
    rom.write_byte(0xCB6844, 0x35)
    rom.write_byte(0x253C0E2, 0x03) # Moves sheik from pedestal

    # Fix child shooting gallery reward to be static
    rom.write_bytes(0xD35EFC, [0x00, 0x00, 0x00, 0x00])

    # Fix target in woods reward to be static
    rom.write_bytes(0xE59CD4, [0x00, 0x00, 0x00, 0x00])

    # Fix GS rewards to be static
    rom.write_bytes(0xEA3934, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xEA3940 , [0x10, 0x00])

    # Fix horseback archery rewards to be static
    rom.write_byte(0xE12BA5, 0x00)
    rom.write_byte(0xE12ADD, 0x00)

    # Fix adult shooting gallery reward to be static
    rom.write_byte(0xD35F55, 0x00)

    # Fix deku theater rewards to be static
    rom.write_bytes(0xEC9A7C, [0x00, 0x00, 0x00, 0x00]) #Sticks
    rom.write_byte(0xEC9CD5, 0x00) #Nuts

    # Fix deku scrub who sells stick upgrade
    rom.write_bytes(0xDF8060, [0x00, 0x00, 0x00, 0x00])

    # Fix deku scrub who sells nut upgrade
    rom.write_bytes(0xDF80D4, [0x00, 0x00, 0x00, 0x00])

    # Fix rolling goron as child reward to be static
    rom.write_bytes(0xED2960, [0x00, 0x00, 0x00, 0x00])

    # Remove intro cutscene
    rom.write_bytes(0xB06BBA, [0x00, 0x00])

    # Remove locked door to Boss Key Chest in Fire Temple
    rom.write_byte(0x22D82B7, 0x3F)

    # Change Bombchu Shop check to Bomb Bag
    rom.write_byte(0x00C6CEDB, 0xA2)
    rom.write_byte(0x00C6CEDF, 0x18)

    # Change Bowling Alley check to Bomb Bag (Part 1)
    rom.write_bytes(0x00E2D716, [0xA6, 0x72])
    rom.write_byte(0x00E2D723, 0x18)

    # Change Bowling Alley check to Bomb Bag (Part 2)
    rom.write_bytes(0x00E2D892, [0xA6, 0x72])
    rom.write_byte(0x00E2D897, 0x18)

    # Change Bazaar check to Bomb Bag (Child?)
    rom.write_bytes(0x00C0082A, [0x00, 0x18])
    rom.write_bytes(0x00C0082C, [0x00, 0x0E, 0X74, 0X02])
    rom.write_byte(0x00C00833, 0xA0)

    # Change Bazaar check to Bomb Bag (Adult?)
    rom.write_bytes(0x00DF7A8E, [0x00, 0x18])
    rom.write_bytes(0x00DF7A90, [0x00, 0x0E, 0X74, 0X02])
    rom.write_byte(0x00DF7A97, 0xA0)

    # Change Goron Shop check to Bomb Bag
    rom.write_bytes(0x00C6ED86, [0x00, 0xA2])
    rom.write_bytes(0x00C6ED8A, [0x00, 0x18])

    # Fix Link the Goron to always work
    rom.write_bytes(0xED2FAC, [0x80, 0x6E, 0x0F, 0x18])
    rom.write_bytes(0xED2FEC, [0x24, 0x0A, 0x00, 0x00])
    rom.write_bytes(0xAE74D8, [0x24, 0x0E, 0x00, 0x00])

    # Fix King Zora Thawed to always work
    rom.write_bytes(0xE55C4C, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xE56290, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xE56298, [0x00, 0x00, 0x00, 0x00])

    # Fix Castle Courtyard to check for meeting Zelda, not Zelda fleeing, to block you
    rom.write_bytes(0xCD5E76, [0x0E, 0xDC])
    rom.write_bytes(0xCD5E12, [0x0E, 0xDC])

    # Upgrade fairies never check for magic meter
    rom.write_bytes(0xC892DC, [0x24,0x0E,0x00,0x01])

    # Item fairies never check for magic meter
    rom.write_bytes(0xC8931C, [0x24,0x0A,0x00,0x01])

    # Magic meter fairies check for scene flags
    rom.write_bytes(0xC8986A, [0x07, 0x4C])
    rom.write_bytes(0xC898A6, [0x07, 0x4D])

    # Link no longer get free magic meter from item fairies
    rom.write_bytes(0xC8AFE8, [0x00, 0x00, 0x00, 0x00])

    # Speed Zelda's Letter scene
    rom.write_bytes(0x290E08E, [0x05, 0xF0])
    rom.write_bytes(0x2E8C108, [0xFF, 0xFF, 0xFF, 0xFF])
    rom.write_bytes(0xD12F76, [0x0E, 0xDC])

    # Speed Zelda escaping from Hyrule Castle
    Block_code = [0x00, 0x00, 0x00, 0x01, 0x00, 0x21, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]
    rom.write_bytes(0x1FC0CF8, Block_code)

    # Speed learning Zelda's Lullaby
    Block_code = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x73, 0x00, 0x3B,
                  0x00, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0C,
                  0x00, 0x17, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF,
                  0x00, 0xD4, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x2E8E900, Block_code)

    # Speed learning Sun's Song
    rom.write_bytes(0x332A4A6, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0xD3, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x332A868, Block_code)

    # Speed learning Saria's Song
    rom.write_bytes(0x20B1736, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x15, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0xD1, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x20B1DA8, Block_code)
    rom.write_bytes(0x20B19C8, [0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    Block_code = [0x00, 0x3E, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD4, 0xFF, 0xFF, 0xF7, 0x31,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD4]
    rom.write_bytes(0x20B19F8, Block_code)

    # Speed learning Epona's Song
    rom.write_bytes(0x29BEF68, [0x00, 0x5E, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0B])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0xD2, 0x00, 0x00,
                  0x00, 0x09, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0A,
                  0x00, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x29BECB0, Block_code)

    # Speed learning Song of Time
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x19, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0xD5, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x252FC80, Block_code)
    rom.write_bytes(0x252FBA0, [0x00, 0x35, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0x1FC3B84, [0xFF, 0xFF, 0xFF, 0xFF])

    # Speed learning Song of Storms
    Block_code = [0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02,
                  0x00, 0xD6, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                  0xFF, 0xFF, 0x00, 0xBE, 0x00, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x3041084, Block_code)

    # Speed learning Minuet of Forest
    rom.write_bytes(0x20AFF86, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0F, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x73, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x20B0800, Block_code)
    rom.write_bytes(0x20AFF90, [0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    rom.write_bytes(0x20AFFC1, [0x00, 0x3E, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00])
    rom.write_bytes(0x20B0492, [0x00, 0x21, 0x00, 0x22])
    rom.write_bytes(0x20B04CA, [0x00, 0x00, 0x00, 0x00])

    # Speed learning Bolero of Fire
    rom.write_bytes(0x224B5D6, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x10, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x74, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x224D7E8, Block_code)
    rom.write_bytes(0x224B5E0, [0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    rom.write_bytes(0x224B611, [0x00, 0x3E, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00])
    rom.write_bytes(0x224B7F8, [0x00, 0x00])
    rom.write_bytes(0x224B828, [0x00, 0x00])
    rom.write_bytes(0x224B858, [0x00, 0x00])
    rom.write_bytes(0x224B888, [0x00, 0x00])

    # Speed learning Serenade of Water
    rom.write_bytes(0x2BEB256, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x75, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x2BEC880, Block_code)
    rom.write_bytes(0x2BEB260, [0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00])
    rom.write_bytes(0x2BEB290, [0x00, 0x3E, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00])
    rom.write_bytes(0x2BEB538, [0x00, 0x00])
    rom.write_bytes(0x2BEB548, [0x80, 0x00])
    rom.write_bytes(0x2BEB554, [0x80, 0x00])
    rom.write_bytes(0x2BEC852, [0x00, 0x21, 0x00, 0x22])

    # Speed learning Nocturne of Shadow
    rom.write_bytes(0x1FFE460, [0x00, 0x2F, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0x1FFFDF6, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x13, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x77, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x2000FD8, Block_code)
    rom.write_bytes(0x2000130, [0x00, 0x32, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3B])

    # Speed learning Requiem of Spirit
    rom.write_bytes(0x218AF16, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x08, 0x00, 0x12, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x76, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x218C574, Block_code)
    rom.write_bytes(0x218B480, [0x00, 0x30, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3B])
    Block_code = [0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
                  0xFF, 0xFF, 0xFA, 0xF9, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
                  0xFF, 0xFF, 0xFA, 0xF9, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
                  0x0F, 0x67, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    rom.write_bytes(0x218AF20, Block_code)
    rom.write_bytes(0x218AF50, [0x00, 0x3E, 0x00, 0x11, 0x00, 0x20, 0x00, 0x00])

    # Speed learning Prelude of Light
    rom.write_bytes(0x252FD26, [0x00, 0x3C])
    Block_code = [0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x14, 0x00, 0x00,
                  0x00, 0x10, 0x00, 0x02, 0x08, 0x8B, 0xFF, 0xFF, 0x00, 0x78, 0x00, 0x11,
                  0x00, 0x20, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x2531320, Block_code)
    rom.write_byte(0x252FF1D, 0x00)
    rom.write_bytes(0x25313DA, [0x00, 0x21, 0x00, 0x22])

    # Speed scene after Deku Tree
    rom.write_bytes(0x2077E20, [0x00, 0x07, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0x2078A10, [0x00, 0x0E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x20])
    Block_code = [0x00, 0x80, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
                  0xFF, 0xFF, 0x00, 0x1E, 0x00, 0x28, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    rom.write_bytes(0x2079570, Block_code)

    # Speed scene after Dodongo's Cavern
    rom.write_bytes(0x2221E88, [0x00, 0x0C, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0x2223308, [0x00, 0x81, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])

    # Speed scene after Jabu Jabu's Belly
    rom.write_bytes(0x2113340, [0x00, 0x0D, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0x2113C18, [0x00, 0x82, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])
    rom.write_bytes(0x21131D0, [0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3C])

    # Speed scene after Forest Temple
    rom.write_bytes(0xD4ED68, [0x00, 0x45, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0xD4ED78, [0x00, 0x3E, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])
    rom.write_bytes(0x207B9D4, [0xFF, 0xFF, 0xFF, 0xFF])

    # Speed scene after Fire Temple
    rom.write_bytes(0x2001848, [0x00, 0x1E, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0xD100B4, [0x00, 0x62, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0xD10134, [0x00, 0x3C, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])

    # Speed scene after Water Temple
    rom.write_bytes(0xD5A458, [0x00, 0x15, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0xD5A3A8, [0x00, 0x3D, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])
    rom.write_bytes(0x20D0D20, [0x00, 0x29, 0x00, 0xC7, 0x00, 0xC8, 0x00, 0xC8])

    # Speed scene after Shadow Temple
    rom.write_bytes(0xD13EC8, [0x00, 0x61, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0xD13E18, [0x00, 0x41, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])

    # Speed scene after Spirit Temple
    rom.write_bytes(0xD3A0A8, [0x00, 0x60, 0x00, 0x3B, 0x00, 0x3C, 0x00, 0x3C])
    rom.write_bytes(0xD39FF0, [0x00, 0x3F, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00])

    # Speed Nabooru defeat scene
    rom.write_bytes(0x2F5AF84, [0x00, 0x00, 0x00, 0x05])
    rom.write_bytes(0x2F5C7DA, [0x00, 0x01, 0x00, 0x02])
    rom.write_bytes(0x2F5C7A2, [0x00, 0x03, 0x00, 0x04])
    rom.write_byte(0x2F5B369, 0x09)
    rom.write_byte(0x2F5B491, 0x04)
    rom.write_byte(0x2F5B559, 0x04)
    rom.write_byte(0x2F5B621, 0x04)
    rom.write_byte(0x2F5B761, 0x07)

    # Speed scene with all medallions
    rom.write_bytes(0x2512680, [0x00, 0x74, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])

    # Speed collapse of Ganon's Tower
    rom.write_bytes(0x33FB328, [0x00, 0x76, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])

    # Speed completion of the trials in Ganon's Castle
    rom.write_bytes(0x31A8090, [0x00, 0x6B, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Forest
    rom.write_bytes(0x31A9E00, [0x00, 0x6E, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Fire
    rom.write_bytes(0x31A8B18, [0x00, 0x6C, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Water
    rom.write_bytes(0x31A9430, [0x00, 0x6D, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Shadow
    rom.write_bytes(0x31AB200, [0x00, 0x70, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Spirit
    rom.write_bytes(0x31AA830, [0x00, 0x6F, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Light

    # Speed obtaining Fairy Ocarina
    rom.write_bytes(0x2151230, [0x00, 0x72, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3D])
    Block_code = [0x00, 0x4A, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                  0xFF, 0xFF, 0x00, 0x3C, 0x00, 0x81, 0xFF, 0xFF]
    rom.write_bytes(0x2151240, Block_code)
    rom.write_bytes(0x2150E20, [0xFF, 0xFF, 0xFA, 0x4C])

    # Speed Zelda Light Arrow cutscene
    rom.write_bytes(0x2531B40, [0x00, 0x28, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0x2532FBC, [0x00, 0x75])
    rom.write_bytes(0x2532FEA, [0x00, 0x75, 0x00, 0x80])  
    rom.write_byte(0x2533115, 0x05)
    rom.write_bytes(0x2533141, [0x06, 0x00, 0x06, 0x00, 0x10])
    rom.write_bytes(0x2533171, [0x0F, 0x00, 0x11, 0x00, 0x40])
    rom.write_bytes(0x25331A1, [0x07, 0x00, 0x41, 0x00, 0x65])
    rom.write_bytes(0x2533642, [0x00, 0x50])
    rom.write_byte(0x253389D, 0x74)
    rom.write_bytes(0x25338A4, [0x00, 0x72, 0x00, 0x75, 0x00, 0x79])
    rom.write_bytes(0x25338BC, [0xFF, 0xFF])
    rom.write_bytes(0x25338C2, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
    rom.write_bytes(0x25339C2, [0x00, 0x75, 0x00, 0x76])
    rom.write_bytes(0x2533830, [0x00, 0x31, 0x00, 0x81, 0x00, 0x82, 0x00, 0x82])

    # Speed Bridge of Light cutscene
    rom.write_bytes(0x292D644, [0x00, 0x00, 0x00, 0xA0])
    rom.write_bytes(0x292D680, [0x00, 0x02, 0x00, 0x0A, 0x00, 0x6C, 0x00, 0x00])
    rom.write_bytes(0x292D6E8, [0x00, 0x27])
    rom.write_bytes(0x292D718, [0x00, 0x32])
    rom.write_bytes(0x292D810, [0x00, 0x02, 0x00, 0x3C])
    rom.write_bytes(0x292D924, [0xFF, 0xFF, 0x00, 0x14, 0x00, 0x96, 0xFF, 0xFF])

    # Speed Magic Meter Great Fairy
    rom.write_bytes(0x2CF7136, [0x00, 0x70])
    rom.write_bytes(0x2CF7144, [0x00, 0x56])
    rom.write_bytes(0x2CF7171, [0x13, 0x00, 0x57])
    rom.write_bytes(0x2CF7299, [0x02, 0x00, 0x00, 0x00, 0x50])
    rom.write_bytes(0x2CF72C9, [0x03, 0x00, 0x51, 0x00, 0x52])
    rom.write_bytes(0x2CF72F9, [0x04, 0x00, 0x53, 0x00, 0x54])
    rom.write_bytes(0x2CF7329, [0x13, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF7359, [0x0A, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF7389, [0x07, 0x00, 0x5A, 0x00, 0x5B])
    rom.write_bytes(0x2CF73B9, [0x0D, 0x00, 0x5C, 0x00, 0x5D])
    rom.write_bytes(0x2CF8344, [0x00, 0x56])
    rom.write_bytes(0x2CF834C, [0x00, 0xDD, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF83AA, [0x00, 0x56, 0x00, 0x57])

    # Speed Double Magic Meter Great Fairy
    rom.write_bytes(0x2CF83E6, [0x00, 0x70])
    rom.write_bytes(0x2CF83F4, [0x00, 0x56])
    rom.write_bytes(0x2CF8421, [0x13, 0x00, 0x57])
    rom.write_bytes(0x2CF8549, [0x02, 0x00, 0x00, 0x00, 0x50])
    rom.write_bytes(0x2CF8579, [0x03, 0x00, 0x51, 0x00, 0x52])
    rom.write_bytes(0x2CF85A9, [0x05, 0x00, 0x53, 0x00, 0x54])
    rom.write_bytes(0x2CF85D9, [0x14, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF8609, [0x0B, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF8639, [0x07, 0x00, 0x5A, 0x00, 0x5B])
    rom.write_bytes(0x2CF8669, [0x0D, 0x00, 0x5C, 0x00, 0x5D])
    rom.write_bytes(0x2CF877C, [0x00, 0x56])
    rom.write_bytes(0x2CF8784, [0x00, 0xE4, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF87E2, [0x00, 0x56, 0x00, 0x57])

    # Speed Double Defense Great Fairy
    rom.write_bytes(0x2CF95D6, [0x00, 0x60])
    rom.write_bytes(0x2CF95E4, [0x00, 0x4A])
    rom.write_bytes(0x2CF9611, [0x13, 0x00, 0x4B])
    rom.write_bytes(0x2CF9739, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2CF9769, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2CF9799, [0x06, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2CF97C9, [0x15, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2CF97F9, [0x0C, 0x00, 0x47, 0x00, 0x49])
    rom.write_bytes(0x2CF9829, [0x12, 0x00, 0x4A, 0x00, 0x54])
    rom.write_bytes(0x2CF9859, [0x07, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF9889, [0x0D, 0x00, 0x57, 0x00, 0x58])
    rom.write_bytes(0x2CF999C, [0x00, 0x4A])
    rom.write_bytes(0x2CF99A4, [0x00, 0xE5, 0x00, 0x4B, 0x00, 0x53])
    rom.write_bytes(0x2CF9A02, [0x00, 0x4A, 0x00, 0x4B])

    # Speed Zora Fountain Great Fairy
    rom.write_bytes(0x2D20166, [0x00, 0x50])
    rom.write_bytes(0x2D20174, [0x00, 0x45])
    rom.write_bytes(0x2D201A1, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D20299, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D202C9, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D202F9, [0x04, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D20329, [0x0E, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D20359, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D20389, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D20552, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D2058C, [0x00, 0x45])
    rom.write_bytes(0x2D20595, [0xAE, 0x00, 0x46, 0x00, 0x48])

    # Speed Castle Great Fairy
    rom.write_bytes(0x2D21026, [0x00, 0x50])
    rom.write_bytes(0x2D21034, [0x00, 0x45])
    rom.write_bytes(0x2D21061, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D21159, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D21189, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D211B9, [0x05, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D211E9, [0x0F, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D21219, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D21249, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D21E3A, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D21E74, [0x00, 0x45])
    rom.write_bytes(0x2D21E7D, [0xAD, 0x00, 0x46, 0x00, 0x48])

    # Speed Colossus Great Fairy
    rom.write_bytes(0x2D21F46, [0x00, 0x50])
    rom.write_bytes(0x2D21F54, [0x00, 0x45])
    rom.write_bytes(0x2D21F81, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D22079, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D220A9, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D220D9, [0x06, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D22109, [0x10, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D22139, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D22169, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D22332, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D2236C, [0x00, 0x45])
    rom.write_bytes(0x2D22375, [0xAF, 0x00, 0x46, 0x00, 0x48])

    # Remove remaining owls
    rom.write_bytes(0x1FE30CE, [0x01, 0x4B])
    rom.write_bytes(0x1FE30DE, [0x01, 0x4B])
    rom.write_bytes(0x1FE30EE, [0x01, 0x4B])
    rom.write_bytes(0x205909E, [0x00, 0x3F])
    rom.write_byte(0x2059094, 0x80)

    # Darunia won't dance
    rom.write_bytes(0x22769E4, [0xFF, 0xFF, 0xFF, 0xFF])

    # Zora moves quickly
    rom.write_bytes(0xE56924, [0x00, 0x00, 0x00, 0x00])

    # Speed Jabu Jabu swallowing Link
    rom.write_bytes(0xCA0784, [0x00, 0x18, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])

    # Ruto no longer points to Zora Sapphire
    rom.write_bytes(0xD03BAC, [0xFF, 0xFF, 0xFF, 0xFF])

    # Ruto never disappears from Jabu Jabu's Belly
    rom.write_byte(0xD01EA3, 0x00)

    # Speed up Epona race start
    rom.write_bytes(0x29BE984, [0x00, 0x00, 0x00, 0x02])
    rom.write_bytes(0x29BE9CA, [0x00, 0x01, 0x00, 0x02])
	
    # Speed start of Horseback Archery
    #rom.write_bytes(0x21B2064, [0x00, 0x00, 0x00, 0x02])
    #rom.write_bytes(0x21B20AA, [0x00, 0x01, 0x00, 0x02])

    # Speed up Epona escape
    rom.write_bytes(0x1FC8B36, [0x00, 0x2A])

    # Speed up draining the well
    rom.write_bytes(0xE0A010, [0x00, 0x2A, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0x2001110, [0x00, 0x2B, 0x00, 0xB7, 0x00, 0xB8, 0x00, 0xB8])

    # Speed up opening the royal tomb for both child and adult
    rom.write_bytes(0x2025026, [0x00, 0x01])
    rom.write_bytes(0x2023C86, [0x00, 0x01])
    rom.write_byte(0x2025159, 0x02)
    rom.write_byte(0x2023E19, 0x02)

    #Speed opening of Door of Time
    rom.write_bytes(0xE0A176, [0x00, 0x02])
    rom.write_bytes(0xE0A35A, [0x00, 0x01, 0x00, 0x02])

    # Poacher's Saw no longer messes up Deku Theater
    rom.write_bytes(0xAE72CC, [0x00, 0x00, 0x00, 0x00])

    # No more free sword for the kid from pedestal
    rom.write_bytes(0xAE57A8, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xAE58F4, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xAE5F74, [0x0C, 0x10, 0x01, 0xC8])
    Block_code = [0x8D, 0x01, 0x00, 0x04, 0x10, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
                  0x91, 0x01, 0x00, 0x68, 0xA1, 0x01, 0x00, 0x40, 0x03, 0xE0, 0x00, 0x08,
                  0xA1, 0x0E, 0x00, 0x68]
    rom.write_bytes(0x3480720, Block_code)

    # Prevent Kokiri Sword from being added to inventory on game load
    rom.write_bytes(0xBAED6C, [0x00, 0x00, 0x00, 0x00])

    # Learning Serenade tied to opening chest in room
    Block_code = [0x3C, 0x0F, 0x80, 0x1D, 0x81, 0xE8, 0xA1, 0xDB, 0x24, 0x19, 0x00, 0x04,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0xA2, 0x1C, 0x44,
                  0x00, 0x00, 0x00, 0x00]
    rom.write_bytes(0xC7BCF0, Block_code)

    # Dampe Chest spawn condition looks at chest flag instead of having obtained hookshot
    Block_code = [0x93, 0x18, 0xAE, 0x7E, 0x27, 0xA5, 0x00, 0x24, 0x33, 0x19, 0x00, 0x01,
                  0x00, 0x00, 0x00, 0x00]
    rom.write_bytes(0xDFEC40, Block_code)

    # Darunia sets an event flag and checks for it
    Block_code = [0x24, 0x19, 0x00, 0x40, 0x8F, 0x09, 0xB4, 0xA8, 0x01, 0x39, 0x40, 0x24,
                  0x01, 0x39, 0xC8, 0x25, 0xAF, 0x19, 0xB4, 0xA8, 0x24, 0x09, 0x00, 0x06]
    rom.write_bytes(0xCF1AB8, Block_code)

    # Fire Arrows now in a chest, always spawn
    rom.write_bytes(0xE9E202, [0x00, 0x0A])
    rom.write_bytes(0xE9E1F2, [0x5B, 0x08])
    rom.write_bytes(0xE9E1D8, [0x00, 0x00, 0x00, 0x00])

    # Fix Biggoron to check a different flag.
    rom.write_byte(0xED329B, 0x72)
    rom.write_byte(0xED43E7, 0x72)
    rom.write_bytes(0xED337C, [0x24, 0x06, 0x00, 0x01])
    rom.write_bytes(0xED3388, [0xA3, 0x06, 0xA6, 0x42])
    rom.write_bytes(0xED6574, [0x00, 0x00, 0x00, 0x00])

    # Overwrite old Hookshot slot with Biggoron Sword
    rom.write_bytes(0xBEEEBE, [0x3D, 0x80, 0x43, 0x0C, 0x00, 0xF8])

    # Allow Ganon's Tower Boss Key to Shuffle
    rom.write_bytes(0xAE603C, [0x25, 0x08, 0xA5, 0xD0])
    rom.write_bytes(0xAE6058, [0x00, 0x00, 0x00, 0x00])
    Block_code = [0x95, 0x19, 0x14, 0x02, 0x30, 0xEF, 0x00, 0x03, 0x24, 0x0D, 0x00, 0x01,
                  0x24, 0x0E, 0x00, 0x0D, 0x17, 0x2E, 0x00, 0x02, 0x01, 0xED, 0x68, 0x04,
                  0x27, 0x39, 0xFF, 0xFD, 0x01, 0x19, 0x18, 0x21, 0x90, 0x6E, 0x00, 0xA8]
    rom.write_bytes(0xAE608C, Block_code)

    # Forbid Sun's Song from a bunch of cutscenes
    Suns_scenes = [0x2016FC9, 0x2017219, 0x20173D9, 0x20174C9, 0x2017679, 0x20C1539, 0x20C15D9, 0x21A0719, 0x21A07F9, 0x2E90129, 0x2E901B9, 0x2E90249, 0x225E829, 0x225E939, 0x306D009]
    for address in Suns_scenes:
        rom.write_byte(address,0x01)

    # Speed text
    for address in text_array:
        rom.write_byte(address, 0x08)

    # Speed Happy Mask shop text
    rom.write_bytes(0x960344, [0x08, 0x08, 0x08, 0x08, 0x57])
    Block_code = [0x6D, 0x6F, 0x6E, 0x65, 0x79, 0x20, 0x05, 0x40, 0x62, 0x61, 0x63, 0x6B,
                  0x20, 0x68, 0x65, 0x72, 0x65, 0x2E, 0x04, 0x08, 0x08]
    rom.write_bytes(0x9603AB, Block_code)
    Block_code = [0x73, 0x69, 0x67, 0x6E, 0x20, 0x01, 0x05, 0x40, 0x72, 0x69, 0x67, 0x68,
                  0x74, 0x20, 0x6F, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
                  0x2E, 0x04, 0x08, 0x08]
    rom.write_bytes(0x9603F8, Block_code)
    rom.write_bytes(0x961160, [0x08, 0x08, 0x08, 0x08])
    rom.write_bytes(0x9611AF, [0x08, 0x08, 0x08, 0x08, 0x44])
    rom.write_bytes(0x9609F0, [0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x54])
    Happy_mask_turn_ins = [0x96066C, 0x961064, 0x9610B8, 0x96110C] #addresses with the same fix for lines upon returning profits from a sold mask
    for address in Happy_mask_turn_ins:
        rom.write_bytes(address, [0x08, 0x08, 0x08, 0x08, 0x47])
    
    # Make item descriptions into a single box
    Short_item_descriptions = [0x92EC84, 0x92F9E3, 0x92F2B4, 0x92F37A]
    for address in Short_item_descriptions:
        rom.write_byte(address,0x02)
        
    # DMA in extra code
    Block_code = [0xAF, 0xBF, 0x00, 0x1C, 0xAF, 0xA4, 0x01, 0x40, 0x3C, 0x05, 0x03, 0x48,
                  0x3C, 0x04, 0x80, 0x40, 0x0C, 0x00, 0x03, 0x7C, 0x24, 0x06, 0x10, 0x00,
                  0x0C, 0x10, 0x02, 0x00]
    rom.write_bytes(0xB17BB4, Block_code)
    Block_code = [0x3C, 0x02, 0x80, 0x12, 0x24, 0x42, 0xD2, 0xA0, 0x24, 0x0E, 0x01, 0x40,
                  0xAC, 0x2E, 0xE5, 0x00, 0x03, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00]
    rom.write_bytes(0x3480800, Block_code)
    rom.write_bytes(0xD270, [0x03, 0x48, 0x00, 0x00, 0x03, 0x48, 0x10, 0x00, 0x03, 0x48, 0x00, 0x00])

    # Fix checksum (Thanks Nintendo)
    Block_code = [0x93, 0x5E, 0x0E, 0x5B, 0xDA, 0x41, 0x6D, 0x4D]
    rom.write_bytes(0x10, Block_code)

    # Set hooks for various code
    rom.write_bytes(0xBE9AC0, [0x0C, 0x10, 0x00, 0x00]) #Progressive Items Text Hook
    rom.write_bytes(0xBE9AE0, [0x0C, 0x10, 0x00, 0x81]) #Progressive Items Item ID Hook
    rom.write_bytes(0xBCECB4, [0x08, 0x10, 0x00, 0xFF, 0x03, 0x19, 0x10, 0x21]) #Progressive Items Graphic ID Hook
    rom.write_bytes(0xBDA26C, [0x0C, 0x22, 0x9E, 0xF0]) #Progressive Items Object Hook, mechanics of parameter bizarre, chests
    rom.write_bytes(0xBDA0E0, [0x0C, 0x22, 0x9E, 0xF0]) #Progressive Items Object Hook, mechanics of parameter bizarre, NPCs
#    rom.write_bytes(0xBD6C94, [0x0C, 0x22, 0x9E, 0xF0]) #Progressive Items Object Hook, unsure where this case is called
    rom.write_bytes(0xB06C2C, [0x0C, 0x10, 0x01, 0x80]) #Save Writing Hook
    rom.write_bytes(0xBDA094, [0x0C, 0x10, 0x02, 0x18]) #Inventory Fix Hook
    rom.write_bytes(0xBDA1CC, [0x0C, 0x10, 0x02, 0x6C, 0xAF, 0xAF, 0x00, 0x2C]) #Chest Biggoron Sword Hook
    rom.write_bytes(0xC89A34, [0x0C, 0x10, 0x02, 0x54, 0x00, 0x00, 0x00, 0x00]) #Progessive magic meter from fairy at death mountain trail
    rom.write_bytes(0xC89A78, [0x0C, 0x10, 0x02, 0x60, 0x00, 0x00, 0x00, 0x00]) #Progessive magic meter from fairy at crater

    # Inventory Fix
    Block_code = [0x3C, 0x04, 0x80, 0x11, 0x34, 0x84, 0xA5, 0xD0, 0x34, 0x06, 0x00, 0x08,
                  0x14, 0xC2, 0x00, 0x02, 0x34, 0x06, 0x00, 0x01, 0xA0, 0x86, 0x00, 0x3E,
                  0x34, 0x06, 0x00, 0x2C, 0x14, 0xC2, 0x00, 0x03, 0x80, 0x86, 0x00, 0x9C,
                  0x30, 0xC6, 0x00, 0xFD, 0xA0, 0x86, 0x00, 0x9C, 0x34, 0x06, 0x00, 0x2D,
                  0x14, 0xC2, 0x00, 0x03, 0x80, 0x86, 0x00, 0x9C, 0x30, 0xC6, 0x00, 0xFB,
                  0xA0, 0x86, 0x00, 0x9C, 0x34, 0x06, 0x00, 0x29, 0x14, 0xC2, 0x00, 0x03,
                  0x80, 0x86, 0x00, 0x9D, 0x30, 0xC6, 0x00, 0xEF, 0xA0, 0x86, 0x00, 0x9D,
                  0x34, 0x06, 0x00, 0x2A, 0x14, 0xC2, 0x00, 0x03, 0x80, 0x86, 0x00, 0x9D,
                  0x30, 0xC6, 0x00, 0xDF, 0xA0, 0x86, 0x00, 0x9D, 0x03, 0xE0, 0x00, 0x08,
                  0x01, 0xF8, 0x30, 0x21]
    rom.write_bytes(0x3480860, Block_code)

    # Chest Check for Biggoron Sword
    Block_code = [0x24, 0x04, 0x00, 0x08, 0x14, 0x8B, 0x00, 0x04, 0x24, 0x04, 0x00, 0x01,
                  0x3C, 0x01, 0x80, 0x12, 0x24, 0x21, 0xA5, 0xD0, 0xA0, 0x24, 0x00, 0x3E,
                  0x03, 0xE0, 0x00, 0x08, 0x91, 0xE4, 0x00, 0x00]
    rom.write_bytes(0x34809B0, Block_code)

    # Menu Fix (Wulfy)
    Block_code = [0x93, 0x19, 0x00, 0x74, 0x24, 0x01, 0x00, 0xFF, 0x17, 0x21, 0x00, 0x02,
                  0x00, 0x00, 0x00, 0x00, 0x24, 0x19, 0x00, 0x2C, 0x03, 0xE0, 0x00, 0x08,
                  0xA7, 0xB9, 0x00, 0x9A]
    rom.write_bytes(0x34808D0, Block_code)
    Block_code = [0x93, 0x2C, 0x00, 0x74, 0x24, 0x01, 0x00, 0xFF, 0x15, 0x81, 0x00, 0x02,
                  0x00, 0x00, 0x00, 0x00, 0x24, 0x0C, 0x00, 0x2C, 0x03, 0xE0, 0x00, 0x08,
                  0x00, 0x00, 0x00, 0x00]
    rom.write_bytes(0x34808F0, Block_code)
    Block_code = [0x91, 0xAE, 0x00, 0x74, 0x24, 0x01, 0x00, 0xFF, 0x15, 0xC1, 0x00, 0x02,
                  0x00, 0x00, 0x00, 0x00, 0x24, 0x0E, 0x00, 0x2C, 0x03, 0xE0, 0x00, 0x08,
                  0xA7, 0xAE, 0x00, 0x9A]
    rom.write_bytes(0x3480910, Block_code)
    Block_code = [0x91, 0xCF, 0x00, 0x74, 0x24, 0x01, 0x00, 0xFF, 0x15, 0xE1, 0x00, 0x02,
                  0x00, 0x00, 0x00, 0x00, 0x24, 0x0F, 0x00, 0x2C, 0x03, 0xE0, 0x00, 0x08,
                  0xA7, 0xAF, 0x00, 0x9A]
    rom.write_bytes(0x3480930, Block_code)
    rom.write_bytes(0x8A9C00, [0x00] * 0x400)
    rom.write_bytes(0xBB77B4, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7890, [0x0C, 0x10, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7950, [0x0C, 0x10, 0x02, 0x44, 0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7BA0, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7BFC, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7C3C, [0x0C, 0x10, 0x02, 0x4C, 0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xBB7C58, [0x0C, 0x10, 0x02, 0x34, 0x00, 0x00, 0x00, 0x00])

    # Sticks on B fix
    rom.write_bytes(0xAE4B14, [0x0C, 0x10, 0x02, 0x74])
    Block_code = [0x90, 0xCE, 0x13, 0xE2, 0x15, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
                  0x25, 0xCE, 0x00, 0xFF, 0xA0, 0xC8, 0x0F, 0x33, 0x03, 0xE0, 0x00, 0x08]
    rom.write_bytes(0x34809D0, Block_code)

    # Progressive Items (Text)
    Block_code = [0x90, 0x45, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x25, 0x4A, 0x00, 0x4F,
                  0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x4D, 0x25, 0x4A, 0x00, 0xFF, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x36,
                  0x25, 0x4A, 0x00, 0x5A, 0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x18,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x08, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x58, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x59, 0x25, 0x4A, 0x00, 0x5C,
                  0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03,
                  0x25, 0x4A, 0x00, 0x40, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x79,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x5B, 0x25, 0x4A, 0x00, 0xCE, 0x15, 0x45, 0x00, 0x08,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72,
                  0x31, 0x6B, 0x00, 0x06, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0xCD, 0x25, 0x4A, 0x00, 0x5F,
                  0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x72, 0x31, 0x6B, 0x00, 0x30, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x5E,
                  0x25, 0x4A, 0x00, 0x90, 0x15, 0x45, 0x00, 0x09, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x71, 0x31, 0x6B, 0x00, 0x06,
                  0x25, 0x4A, 0x00, 0x04, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x91, 0x25, 0x4A, 0x00, 0xA7,
                  0x15, 0x45, 0x00, 0x09, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x71, 0x31, 0x6B, 0x00, 0x30, 0x25, 0x4A, 0x00, 0x20,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0xA8, 0x25, 0x4A, 0x00, 0x6C, 0x15, 0x45, 0x00, 0x0C,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72,
                  0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x40,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x30, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x07,
                  0x25, 0x4A, 0x00, 0x57, 0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x03,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x01, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x31, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x56, 0x03, 0xE0, 0x00, 0x08]
    rom.write_bytes(0x3480000, Block_code)

    # Progressive Items (Item IDs)
    Block_code = [0x00, 0x00, 0x00, 0x00, 0x31, 0x4A, 0x00, 0x00, 0x25, 0x4A, 0x00, 0x0B,
                  0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x4D, 0x25, 0x4A, 0x00, 0xFF, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x0A,
                  0x25, 0x4A, 0x00, 0x4F, 0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x18,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x08, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x4D, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x4E, 0x25, 0x4A, 0x00, 0x52,
                  0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03,
                  0x25, 0x4A, 0x00, 0x40, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x50,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x51, 0x25, 0x4A, 0x00, 0x54, 0x15, 0x45, 0x00, 0x08,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72,
                  0x31, 0x6B, 0x00, 0x06, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x53, 0x25, 0x4A, 0x00, 0x57,
                  0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x72, 0x31, 0x6B, 0x00, 0x30, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x56,
                  0x25, 0x4A, 0x00, 0x98, 0x15, 0x45, 0x00, 0x09, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x71, 0x31, 0x6B, 0x00, 0x06,
                  0x25, 0x4A, 0x00, 0x04, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x99, 0x25, 0x4A, 0x00, 0x9A,
                  0x15, 0x45, 0x00, 0x09, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x71, 0x31, 0x6B, 0x00, 0x30, 0x25, 0x4A, 0x00, 0x20,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x9B, 0x25, 0x4A, 0x00, 0x49, 0x15, 0x45, 0x00, 0x0C,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72,
                  0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x40,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x06, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x48,
                  0x25, 0x4A, 0x00, 0x4C, 0x15, 0x45, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x03,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x01, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0x03, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0x4B, 0x08, 0x01, 0xBF, 0x73]
    rom.write_bytes(0x3480200, Block_code)

    # Progressive Items (Graphic IDs)
    Block_code = [0x80, 0x43, 0x00, 0x02, 0x31, 0x4A, 0x00, 0x00, 0x25, 0x4A, 0x00, 0x2E,
                  0x15, 0x43, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x4D, 0x25, 0x4A, 0x00, 0xFF, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x2D,
                  0x25, 0x4A, 0x00, 0x1A, 0x15, 0x43, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x18,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x08, 0x30, 0x63, 0x00, 0x00,
                  0x24, 0x63, 0x00, 0x18, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x19, 0x25, 0x4A, 0x00, 0x4A,
                  0x15, 0x43, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03,
                  0x25, 0x4A, 0x00, 0x40, 0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x58,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0x63, 0x00, 0x00,
                  0x24, 0x63, 0x00, 0x49, 0x25, 0x4A, 0x00, 0x2B, 0x15, 0x43, 0x00, 0x08,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72,
                  0x31, 0x6B, 0x00, 0x06, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x2A, 0x25, 0x4A, 0x00, 0x23,
                  0x15, 0x43, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x72, 0x31, 0x6B, 0x00, 0x30, 0x15, 0x4B, 0x00, 0x03,
                  0x31, 0x4A, 0x00, 0x00, 0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x22,
                  0x25, 0x4A, 0x00, 0x73, 0x15, 0x43, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x72, 0x31, 0x6B, 0x00, 0xC0,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x40, 0x30, 0x63, 0x00, 0x00,
                  0x24, 0x63, 0x00, 0x33, 0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00,
                  0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x6C, 0x25, 0x4A, 0x00, 0x17,
                  0x15, 0x43, 0x00, 0x0C, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x03, 0x15, 0x4B, 0x00, 0x03,
                  0x25, 0x4A, 0x00, 0x01, 0x30, 0x63, 0x00, 0x00, 0x24, 0x63, 0x00, 0x35,
                  0x15, 0x4B, 0x00, 0x03, 0x31, 0x4A, 0x00, 0x00, 0x30, 0x63, 0x00, 0x00,
                  0x24, 0x63, 0x00, 0x16, 0x08, 0x0E, 0x27, 0x2B]
    rom.write_bytes(0x34803FC, Block_code)

    # Progressive Items (Object IDs)
    Block_code = [0x31, 0x4A, 0x00, 0x00, 0x25, 0x4A, 0x01, 0x2D, 0x15, 0x45, 0x00, 0x08,
                  0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73,
                  0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x00,
                  0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x01, 0x47, 0x25, 0x4A, 0x01, 0x7B,
                  0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00, 0x3C, 0x0B, 0x80, 0x12,
                  0x91, 0x6B, 0xA6, 0x72, 0x31, 0x6B, 0x00, 0xC0, 0x15, 0x4B, 0x00, 0x03,
                  0x25, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00, 0x24, 0xA5, 0x00, 0xE7,
                  0x25, 0x4A, 0x00, 0xBE, 0x15, 0x45, 0x00, 0x08, 0x31, 0x4A, 0x00, 0x00,
                  0x3C, 0x0B, 0x80, 0x12, 0x91, 0x6B, 0xA6, 0x73, 0x31, 0x6B, 0x00, 0x03,
                  0x15, 0x4B, 0x00, 0x03, 0x25, 0x4A, 0x00, 0x00, 0x30, 0xA5, 0x00, 0x00,
                  0x24, 0xA5, 0x00, 0xE9, 0x08, 0x0E, 0x46, 0x43]
    rom.write_bytes(0x3480564, Block_code)

    # Progressive Fairies (changes magic meter fairy cutscenes based on current magic level)
    Block_code = [0x3C, 0x0A, 0x80, 0x12, 0x21, 0x4A, 0xA5, 0xD0, 0x81, 0x4A, 0x00, 0x32,
                  0x3C, 0x0F, 0x80, 0x1D, 0x21, 0xEF, 0xA1, 0xC8, 0x24, 0x0B, 0x00, 0x01,
                  0x3C, 0x19, 0x80, 0x37, 0x11, 0x40, 0x00, 0x02, 0x23, 0x39, 0x6A, 0xB0,
                  0x23, 0x39, 0x12, 0xB0, 0x03, 0xE0, 0x00, 0x08, 0xA1, 0xEB, 0x00, 0x00,
                  0x3C, 0x0A, 0x80, 0x12, 0x21, 0x4A, 0xA5, 0xD0, 0x81, 0x4A, 0x00, 0x32,
                  0x3C, 0x0F, 0x80, 0x1D, 0x21, 0xEF, 0xA1, 0xC8, 0x24, 0x0B, 0x00, 0x01,
                  0x3C, 0x19, 0x80, 0x37, 0x11, 0x40, 0x00, 0x02, 0x23, 0x39, 0x6A, 0xB0,
                  0x23, 0x39, 0x12, 0xB0, 0x03, 0xE0, 0x00, 0x08, 0xA1, 0xEB, 0x00, 0x01]
    rom.write_bytes(0x3480950, Block_code)

    # Write Initial Save File
    Block_code = [0xA2, 0x28, 0x80, 0x20, 0x24, 0x05, 0x80, 0x02, 0x24, 0x0F, 0x00, 0x84,
                  0x24, 0x18, 0x00, 0x01, 0x24, 0x19, 0x00, 0x08, 0x24, 0x08, 0x00, 0x80,
                  0xA6, 0x25, 0x00, 0xD8, 0xA2, 0x2F, 0x00, 0xDA, 0xA2, 0x38, 0x01, 0x65,
                  0xA2, 0x39, 0x09, 0xB6, 0xA2, 0x28, 0x0A, 0x24, 0xA2, 0x38, 0x0A, 0xCE,
                  0xA2, 0x28, 0x0A, 0xCF, 0xA2, 0x28, 0x0A, 0xE8, 0x24, 0x05, 0x00, 0x20,
                  0xA2, 0x25, 0x0B, 0x3F, 0xA2, 0x28, 0x0E, 0xDC, 0xA2, 0x25, 0x0E, 0xDD,
                  0xA2, 0x25, 0x0E, 0xED, 0xA2, 0x38, 0x0E, 0xF9, 0xA2, 0x25, 0x00, 0xA7,
                  0xA2, 0x28, 0x0E, 0xE0, 0xA2, 0x38, 0x02, 0x0E, 0xA2, 0x39, 0x01, 0x49,
                  0xA2, 0x39, 0x0E, 0xD6, 0x24, 0x05, 0x01, 0xFF, 0x24, 0x0F, 0x01, 0xFB,
                  0x24, 0x18, 0x07, 0xFF, 0x24, 0x19, 0x00, 0x04, 0x24, 0x08, 0x00, 0x30,
                  0xA6, 0x25, 0x0E, 0xE2, 0xA6, 0x2F, 0x0E, 0xE8, 0xA6, 0x38, 0x0E, 0xEA,
                  0xA2, 0x28, 0x0E, 0xE7, 0xA2, 0x39, 0x0F, 0x1A, 0x24, 0x08, 0x10, 0x20,
                  0x24, 0x19, 0x00, 0x2C, 0x24, 0x18, 0x00, 0x49, 0x24, 0x0F, 0x00, 0x02,
                  0x24, 0x05, 0x00, 0x40, 0xA6, 0x28, 0x0E, 0xD4, 0x00, 0x00, 0x00, 0x00,
                  0xA2, 0x38, 0x00, 0xF6, 0xA2, 0x2F, 0x00, 0x3F, 0xA2, 0x25, 0x0A, 0x42,
                  0x92, 0x25, 0x0E, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0xA2, 0x25, 0x0E, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00, 0x24, 0x08, 0x0F, 0x01, 0x24, 0x19, 0x00, 0x09,
                  0x24, 0x18, 0x00, 0x03, 0x24, 0x0F, 0x00, 0x04, 0x24, 0x05, 0x00, 0x06,
                  0xA6, 0x28, 0x01, 0x10, 0xA2, 0x39, 0x01, 0x2C, 0xA2, 0x38, 0x01, 0x2E,
                  0xA2, 0x2F, 0x0F, 0x0A, 0xA2, 0x25, 0x0F, 0x21, 0x03, 0xE0, 0x00, 0x08]
    rom.write_bytes(0x3480600, Block_code)

    # Set up for Rainbow Bridge dungeons condition
    Block_code = [0x15, 0x41, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0xEA, 0x00, 0xA5,
                  0x24, 0x01, 0x00, 0x1C, 0x31, 0x4A, 0x00, 0x1C, 0x08, 0x07, 0x88, 0xD9]
    rom.write_bytes(0x3480820, Block_code)

    # Gossip stones resond to stone of agony
    Block_code = [0x3C, 0x01, 0x80, 0x12, 0x80, 0x21, 0xA6, 0x75, 0x30, 0x21, 0x00, 0x20,
                  0x03, 0xE0, 0x00, 0x08]
    rom.write_bytes(0x3480840, Block_code)

    # Set up Rainbow Bridge conditions
    if world.bridge == 'medallions':
        Block_code = [0x80, 0xEA, 0x00, 0xA7, 0x24, 0x01, 0x00, 0x3F,
                      0x31, 0x4A, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00]
        rom.write_bytes(0xE2B454, Block_code)
    elif world.bridge == 'open':
        rom.write_bytes(0x34806B8, [0x34, 0xA5, 0x00, 0x20])
    elif world.bridge == 'dungeons':
        Block_code = [0x80, 0xEA, 0x00, 0xA7, 0x24, 0x01, 0x00, 0x3F,
                      0x08, 0x10, 0x02, 0x08, 0x31, 0x4A, 0x00, 0x3F]
        rom.write_bytes(0xE2B454, Block_code)

    if world.open_forest:
        rom.write_byte(0x2081148, 0x80)
        rom.write_bytes(0x34806C4, [0x92, 0x25, 0x0E, 0xD5, 0x34, 0xA5, 0x00, 0x10, 0xA2, 0x25, 0x0E, 0xD5])

    if world.open_door_of_time:
        rom.write_bytes(0x34806BC, [0x34, 0xA5, 0x00, 0x08])

    # Sets hooks for gossip stone changes
    if world.hints:
        rom.write_bytes(0xEE7B84, [0x0C, 0x10, 0x02, 0x10])
        rom.write_bytes(0xEE7B8C, [0x24, 0x02, 0x00, 0x20])
        address = 0xB85B11
        offset = 0xBE4C
        for i in range(0,33):
                offset_high = offset >> 8
                offset_low = offset & 0x00FF
                rom.write_bytes(address, [0x00, offset_high, offset_low])
                offset = offset + 0x5C
                address = address + 0x08
        buildHints(world, rom)

    # patch items
    for location in world.get_locations():
        itemid = location.item.code
        locationaddress = location.address
        secondaryaddress = location.address2

        if itemid is None or location.address is None:
            continue
        if location.type == 'Special':
            if location.name == 'Treasure Chest Game':
                rom.write_bytes(locationaddress, item_data[location.item.name])
            else:
                rom.write_byte(locationaddress, item_data[location.item.name][0])
                rom.write_byte(secondaryaddress, item_data[location.item.name][3])
        elif location.type == 'Song':
            rom.write_byte(locationaddress, itemid)
            itemid = itemid + 0x0D
            rom.write_byte(secondaryaddress, itemid)
            if location.name == 'Impa at Castle':
                impa_fix = 0x65 - location.item.index
                rom.write_byte(0xD12ECB, impa_fix)
                impa_fix = 0x8C34 - (location.item.index * 4)
                impa_fix_high = impa_fix >> 8
                impa_fix_low = impa_fix & 0x00FF
                rom.write_bytes(0xB063FE, [impa_fix_high, impa_fix_low])
                rom.write_byte(0x2E8E931, item_data[location.item.name]) #Fix text box
            elif location.name == 'Song from Malon':
                if location.item.name == 'Suns Song':
                    rom.write_byte(locationaddress, itemid)
                malon_fix = 0x8C34 - (location.item.index * 4)
                malon_fix_high = malon_fix >> 8
                malon_fix_low = malon_fix & 0x00FF
                rom.write_bytes(0xD7E142, [malon_fix_high, malon_fix_low])
                #rom.write_bytes(0xD7E8D6, [malon_fix_high, malon_fix_low]) # I don't know what this does, may be useful?
                rom.write_bytes(0xD7E786, [malon_fix_high, malon_fix_low])
                rom.write_byte(0x29BECB9, item_data[location.item.name]) #Fix text box
            elif location.name == 'Song from Composer Grave':
                sun_fix = 0x8C34 - (location.item.index * 4)
                sun_fix_high = sun_fix >> 8
                sun_fix_low = sun_fix & 0x00FF
                rom.write_bytes(0xE09F66, [sun_fix_high, sun_fix_low])
                rom.write_byte(0x332A87D, item_data[location.item.name]) #Fix text box
            elif location.name == 'Song from Saria':
                saria_fix = 0x65 - location.item.index
                rom.write_byte(0xE2A02B, saria_fix)
                saria_fix = 0x8C34 - (location.item.index * 4)
                saria_fix_high = saria_fix >> 8
                saria_fix_low = saria_fix & 0x00FF
                rom.write_bytes(0xE29382, [saria_fix_high, saria_fix_low])
                rom.write_byte(0x20B1DBD, item_data[location.item.name]) #Fix text box
            elif location.name == 'Song from Ocarina of Time':
                rom.write_byte(0x252FC95, item_data[location.item.name]) #Fix text box
            elif location.name == 'Song at Windmill':
                windmill_fix = 0x65 - location.item.index
                rom.write_byte(0xE42ABF, windmill_fix)
                rom.write_byte(0x3041091, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik Forest Song':
                minuet_fix = 0x65 - location.item.index
                rom.write_byte(0xC7BAA3, minuet_fix)
                rom.write_byte(0x20B0815, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik at Temple':
                prelude_fix = 0x65 - location.item.index
                rom.write_byte(0xC805EF, prelude_fix)
                rom.write_byte(0x2531335, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik in Crater':
                bolero_fix = 0x65 - location.item.index
                rom.write_byte(0xC7BC57, bolero_fix)
                rom.write_byte(0x224D7FD, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik in Ice Cavern':
                serenade_fix = 0x65 - location.item.index
                rom.write_byte(0xC7BD77, serenade_fix)
                rom.write_byte(0x2BEC895, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik in Kakariko':
                nocturne_fix = 0x65 - location.item.index
                rom.write_byte(0xAC9A5B, nocturne_fix)
                rom.write_byte(0x2000FED, item_data[location.item.name]) #Fix text box
            elif location.name == 'Sheik at Colossus':
                rom.write_byte(0x218C589, item_data[location.item.name]) #Fix text box
        elif location.type == 'NPC':
            rom.write_byte(locationaddress, location.item.index)
            if secondaryaddress is not None:
                rom.write_byte(secondaryaddress, location.item.index)
        else:
            locationdefault = location.default & 0xF01F
            itemid = itemid | locationdefault
            itemidhigh = itemid >> 8
            itemidlow = itemid & 0x00FF

            rom.write_bytes(locationaddress, [itemidhigh, itemidlow])
            if secondaryaddress is not None:
                rom.write_bytes(secondaryaddress, [itemidhigh, itemidlow])

    # patch fairy entrances
    for region in world.regions:
        for exit in region.exits:
            if exit.target is not None:
                target1high = exit.target[0] >> 8
                target1low = exit.target[0] & 0x00FF
                target2high = exit.addresses[3] >> 8
                target2low = exit.addresses[3] & 0x00FF
                rom.write_bytes(exit.addresses[0], [target1high, target1low])
                rom.write_bytes(exit.addresses[1], [target1high, target1low])
                rom.write_bytes(exit.addresses[2], [target1high, target1low])
                rom.write_bytes(exit.target[1], [target2high, target2low])
    return rom
